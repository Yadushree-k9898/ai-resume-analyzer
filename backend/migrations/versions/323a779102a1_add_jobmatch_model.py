"""Add JobMatch model

Revision ID: 323a779102a1
Revises: 559a56dd134e
Create Date: 2025-03-13 13:21:22.861528

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '323a779102a1'
down_revision: Union[str, None] = '559a56dd134e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('dashboard')
    op.alter_column('job_matches', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('job_matches', 'job_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('job_matches', 'match_score',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Integer(),
               existing_nullable=False)
    op.alter_column('job_matches', 'missing_skills',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.String(),
               existing_nullable=True,
               existing_server_default=sa.text("'[]'::jsonb"))
    op.create_index(op.f('ix_job_matches_id'), 'job_matches', ['id'], unique=False)
    op.drop_constraint('job_matches_user_id_fkey', 'job_matches', type_='foreignkey')
    op.drop_constraint('job_matches_job_id_fkey', 'job_matches', type_='foreignkey')
    op.create_foreign_key(None, 'job_matches', 'jobs', ['job_id'], ['id'])
    op.create_foreign_key(None, 'job_matches', 'users', ['user_id'], ['id'])
    op.drop_column('job_matches', 'created_at')
    op.drop_constraint('jobs_user_id_fkey', 'jobs', type_='foreignkey')
    op.drop_column('jobs', 'user_id')
    op.drop_column('resumes', 'skills_analysis')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('resumes', sa.Column('skills_analysis', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('jobs', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('jobs_user_id_fkey', 'jobs', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.add_column('job_matches', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.drop_constraint('fk_job_matches_resume', 'job_matches', type_='foreignkey')

    
    op.create_foreign_key('job_matches_job_id_fkey', 'job_matches', 'jobs', ['job_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('job_matches_user_id_fkey', 'job_matches', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_job_matches_id'), table_name='job_matches')
    op.alter_column('job_matches', 'missing_skills',
               existing_type=sa.String(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True,
               existing_server_default=sa.text("'[]'::jsonb"))
    op.alter_column('job_matches', 'match_score',
               existing_type=sa.Integer(),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=False)
    op.alter_column('job_matches', 'job_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('job_matches', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_table('dashboard',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_resumes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('latest_resume_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('best_resume_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('resume_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('average_resume_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_jobs_applied', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('job_application_status', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('job_matches', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('total_job_matches', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('missing_skills', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('skills_analysis', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['best_resume_id'], ['resumes.id'], name='dashboard_best_resume_id_fkey'),
    sa.ForeignKeyConstraint(['latest_resume_id'], ['resumes.id'], name='dashboard_latest_resume_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='dashboard_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='dashboard_pkey')
    )
    # ### end Alembic commands ###
