"""Fix resume relationships and missing_skills

Revision ID: c128f1fee7cb
Revises: a87385ec9fb1
Create Date: 2025-03-14 11:09:03.585551

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c128f1fee7cb'
down_revision: Union[str, None] = 'a87385ec9fb1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_job_matches_id', table_name='job_matches')
    op.drop_table('job_matches')
    op.drop_table('dashboard')
    op.add_column('resumes', sa.Column('missing_skills', sa.Text(), nullable=True))
    op.alter_column('resumes', 'parsed_skills',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=sa.Text(),
               existing_nullable=True)
    op.drop_column('resumes', 'job_matches')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('resumes', sa.Column('job_matches', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.alter_column('resumes', 'parsed_skills',
               existing_type=sa.Text(),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_column('resumes', 'missing_skills')
    op.create_table('dashboard',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_resumes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('latest_resume_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('best_resume_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('resume_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('average_resume_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_jobs_applied', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('job_application_status', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('job_matches', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('total_job_matches', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('missing_skills', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('skills_analysis', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['best_resume_id'], ['resumes.id'], name='dashboard_best_resume_id_fkey'),
    sa.ForeignKeyConstraint(['latest_resume_id'], ['resumes.id'], name='dashboard_latest_resume_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='dashboard_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='dashboard_pkey')
    )
    op.create_table('job_matches',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('job_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('match_score', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('missing_skills', sa.VARCHAR(), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('resume_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['resume_id'], ['resumes.id'], name='fk_job_matches_resume'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='job_matches_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='job_matches_pkey')
    )
    op.create_index('ix_job_matches_id', 'job_matches', ['id'], unique=False)
    # ### end Alembic commands ###
